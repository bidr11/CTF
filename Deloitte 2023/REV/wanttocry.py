mem = [ 0x7e, 0x42, 0xa0, 0x15, 0x25, 0x2a, 0xef]

def process_mem(mem):

	initial = [0]*7

	initial[0] = 0x16;
	initial[1] = 0x36;
	initial[2] = 0xd4;
	initial[3] = 0x65;

	initial[4] = 0x1f;
	initial[5] = 5;
	initial[6] = 0xc0;

	counter = 0;

	while( True ) :

		mem_len = len(mem)
		if (mem_len <= counter):
			break;

		intermediary = (counter >> 0x1f) >> 0x1d;
		mem[counter] = initial[(counter + intermediary & 7) - intermediary] ^ mem[counter]

		counter = counter + 1;

	return "".join([chr(i) for i in mem])

flag = ""
flag += process_mem(mem)

year = 2017
day = 11
mon = 5
l=[]
for i in range(7):
	l.append( i + (((year - day) + day * day + mon * i) - mon) + 2)
	
indices = [i%0x6a for i in l]

array_ptrs = b'\x31\x32\x36\x30\x00\x34\x6b\x00\x35\x6c\x6f\x00\x61\x61\x6e\x64\x61\x00\x61\x62\x72\x61\x78\x61\x73\x00\x61\x63\x69\x64\x00\x61\x63\x6d\x65\x00\x61\x62\x63\x00\x61\x63\x74\x69\x66\x65\x64\x00\x61\x64\x61\x00\x61\x67\x65\x6e\x61\x00\x61\x67\x69\x70\x6c\x61\x6e\x00\x61\x68\x00\x61\x69\x00\x61\x69\x72\x63\x6f\x70\x00\x61\x6c\x61\x62\x61\x6d\x61\x00\x61\x6c\x63\x6f\x6e\x00\x61\x6d\x62\x75\x6c\x61\x6e\x63\x65\x00\x61\x6e\x6e\x61\x6b\x6f\x75\x72\x6e\x69\x6b\x6f\x76\x61\x00\x61\x6e\x74\x69\x00\x61\x6e\x74\x69\x63\x6d\x6f\x73\x00\x61\x72\x63\x76\x6e\x00\x62\x6f\x6d\x62\x65\x72\x00\x62\x72\x61\x69\x6e\x00\x62\x79\x74\x65\x62\x61\x6e\x64\x69\x74\x00\x63\x68\x72\x69\x73\x74\x6d\x61\x73\x74\x72\x65\x65\x00\x63\x69\x68\x00\x63\x6f\x6d\x6d\x77\x61\x72\x72\x69\x6f\x72\x00\x63\x72\x65\x65\x70\x65\x72\x00\x65\x6c\x69\x7a\x61\x00\x65\x6c\x6b\x63\x6c\x6f\x6e\x65\x72\x00\x66\x6f\x72\x6d\x00\x67\x72\x61\x79\x62\x69\x72\x64\x00\x68\x61\x72\x65\x00\x69\x6e\x69\x74\x31\x39\x38\x34\x00\x6a\x65\x72\x75\x73\x61\x6c\x65\x6d\x00\x6b\x61\x6d\x61\x73\x75\x74\x72\x61\x00\x6b\x6f\x6b\x6f\x00\x6c\x61\x6d\x65\x72\x65\x78\x74\x65\x72\x6d\x69\x6e\x61\x74\x6f\x72\x00\x6d\x61\x63\x6d\x61\x67\x00\x6d\x64\x65\x66\x00\x6d\x65\x6c\x69\x73\x73\x61\x00\x6d\x69\x63\x68\x65\x6c\x61\x6e\x67\x65\x6c\x6f\x00\x6e\x61\x76\x69\x64\x61\x64\x00\x6e\x61\x74\x61\x73\x00\x6e\x76\x69\x72\x00\x6f\x6e\x65\x68\x61\x6c\x66\x00\x6f\x6e\x74\x61\x72\x69\x6f\x31\x30\x32\x34\x00\x6f\x6e\x74\x61\x72\x69\x6f\x32\x30\x34\x38\x00\x6f\x6e\x74\x61\x72\x69\x6f\x00\x70\x69\x6b\x61\x63\x68\x75\x76\x69\x72\x75\x73\x00\x70\x69\x6e\x67\x70\x6f\x6e\x67\x00\x72\x61\x76\x6d\x6f\x6e\x65\x00\x73\x63\x61\x00\x73\x63\x6f\x72\x65\x73\x00\x73\x63\x6f\x74\x74\x73\x76\x61\x6c\x6c\x65\x79\x00\x73\x65\x76\x65\x6e\x64\x75\x73\x74\x00\x73\x68\x61\x6e\x6b\x61\x72\x73\x76\x69\x72\x75\x73\x00\x73\x69\x6d\x69\x6c\x65\x00\x73\x6d\x65\x67\x65\x6e\x67\x69\x6e\x65\x00\x73\x74\x6f\x6e\x65\x64\x00\x73\x75\x6e\x64\x61\x79\x00\x74\x64\x6c\x34\x00\x74\x65\x63\x68\x6e\x6f\x00\x77\x68\x61\x6c\x65\x00\x7a\x6d\x69\x73\x74\x00\x62\x61\x64\x74\x72\x61\x6e\x73\x00\x62\x61\x67\x6c\x65\x00\x62\x6c\x61\x73\x74\x65\x72\x00\x62\x72\x6f\x6e\x74\x6f\x6b\x00\x62\x75\x6c\x75\x62\x65\x62\x65\x6b\x00\x63\x6f\x64\x65\x72\x65\x64\x00\x64\x61\x70\x72\x6f\x73\x79\x77\x6f\x72\x6d\x00\x63\x6f\x64\x65\x72\x65\x64\x69\x69\x00\x64\x61\x62\x62\x65\x72\x00\x64\x6f\x6f\x6d\x6a\x75\x69\x63\x65\x00\x65\x78\x70\x6c\x6f\x72\x65\x7a\x69\x70\x00\x66\x61\x74\x68\x65\x72\x63\x68\x72\x69\x73\x74\x6d\x61\x73\x00\x68\x79\x62\x72\x69\x73\x00\x69\x6c\x6f\x76\x65\x79\x6f\x75\x00\x6b\x61\x6b\x77\x6f\x72\x6d\x00\x6b\x6c\x65\x7a\x00\x6b\x6f\x6f\x62\x66\x61\x63\x65\x00\x6d\x6f\x72\x72\x69\x73\x00\x6d\x79\x64\x6f\x6f\x6d\x00\x6d\x79\x6c\x69\x66\x65\x00\x6e\x65\x74\x73\x6b\x79\x00\x6e\x69\x6d\x64\x61\x00\x73\x61\x64\x6d\x69\x6e\x64\x00\x73\x61\x73\x73\x65\x72\x00\x73\x69\x72\x63\x61\x6d\x00\x73\x6f\x62\x65\x72\x00\x73\x6f\x62\x69\x67\x00\x73\x71\x6c\x73\x6c\x61\x6d\x6d\x65\x72\x00\x73\x74\x75\x78\x6e\x65\x74\x00\x73\x77\x65\x6e\x00\x73\x75\x70\x65\x72\x6e\x6f\x76\x61\x77\x6f\x72\x6d\x00\x75\x70\x65\x72\x69\x6e\x67\x00\x77\x33\x32\x61\x6c\x63\x72\x61\x66\x00\x77\x33\x32\x62\x6f\x6c\x67\x69\x6d\x6f\x77\x6f\x72\x6d\x00\x77\x33\x32\x69\x72\x63\x62\x6f\x74\x77\x6f\x72\x6d\x00\x77\x65\x6c\x63\x68\x69\x61\x00\x77\x69\x74\x74\x79\x00\x7a\x6f\x74\x6f\x62\x31\x00'
array_ptrs = array_ptrs.split(b"\x00")
array_ptrs = [i.decode() for i in array_ptrs if i]

for i in indices:
	flag += array_ptrs[i]

mem3 = [ 0x38, 0x5a, 0xbb, 0x06, 0x7e, 0x69 ]

flag += process_mem(mem3)

print(flag)


#https://network-sec.de/LUKS_cracking